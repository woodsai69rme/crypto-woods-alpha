
name: Ultimate Crypto Trading Platform - CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level high

      - name: Type check
        run: npx tsc --noEmit

  # Unit & Integration Tests
  test:
    name: Testing Suite
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      matrix:
        test-suite: [unit, integration, security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ${{ matrix.test-suite }} tests
        run: npm run test:${{ matrix.test-suite }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-suite }}
          path: |
            coverage/
            test-results/

  # E2E Tests
  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            playwright-report/
            test-results/

  # Performance Tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance

  # System Audit
  audit:
    name: Comprehensive System Audit
    runs-on: ubuntu-latest
    needs: [test, e2e]
    env:
      VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.SUPABASE_PUBLISHABLE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run comprehensive audit
        run: npm run audit:comprehensive

      - name: Generate audit report
        run: |
          mkdir -p reports
          npm run audit:comprehensive > reports/audit-report.json

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: reports/

  # Build & Deploy
  build-deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    needs: [test, e2e, performance, audit]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_PUBLISHABLE_KEY: ${{ secrets.SUPABASE_PUBLISHABLE_KEY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      # Deploy to Vercel
      - name: Deploy to Vercel
        if: success()
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

      # Deploy to Docker Hub
      - name: Build and push Docker image
        if: success()
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/crypto-trading-platform:latest
            ${{ secrets.DOCKER_USERNAME }}/crypto-trading-platform:${{ github.sha }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  # Release Management
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-deploy
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'release:')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: echo "version=$(date +%Y.%m.%d)" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Create release package
        run: |
          tar -czf crypto-trading-platform-v${{ steps.version.outputs.version }}.tar.gz \
            dist/ docs/ scripts/ package.json README.md

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## Ultimate Crypto Trading Platform Release v${{ steps.version.outputs.version }}
            
            ### 🚀 Features
            - Complete crypto trading platform
            - AI-powered market analysis
            - Real-time data feeds
            - Comprehensive system auditing
            
            ### 📦 Deployment Options
            - Vercel: [Live Demo](https://your-vercel-url.vercel.app)
            - Docker: `docker pull ${{ secrets.DOCKER_USERNAME }}/crypto-trading-platform:latest`
            - Manual: Download and extract release package
            
            ### 📊 Quality Metrics
            - All tests passing ✅
            - Security audit clean ✅
            - Performance benchmarks met ✅
            - Comprehensive system audit passed ✅
          draft: false
          prerelease: false

  # Notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-deploy.result }}" = "success" ]; then
            echo "🎉 Deployment successful!"
            echo "✅ All systems operational"
            echo "🚀 Ready for production traffic"
          else
            echo "❌ Deployment failed!"
            echo "🔍 Check logs for details"
          fi
